const express = require("express");
const router = express.Router();
const jwt = require("jsonwebtoken");
const cookieparser = require("cookie-parser");
const { createClient } = require("@supabase/supabase-js");
const supabaseUrl = "YOUR_SUPABASE_URL";
const supabaseKey = "YOUR_SUPABASE_KEY";
const supabase = createClient(supabaseUrl, supabaseKey);

router.use(express.json());

router.post("/log_in", async (req, res) => {
  console.log("login request : ", req.body);
  const { email, password } = req.body;
  const { data: existingUser, error: userError } = await supabase
    .from("profiles")
    .select("email")
    .eq("email", email)
    .single();

  if (!existingUser) {
    return res.json({ message: "user is not registered!" });
  }

  if (!email || !password) {
    return res.json({ message: "Email and password are required." });
  }
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });
    if (error) {
      // If login fails, return an appropriate message
      if (error.message == "Invalid login credentials") {
        console.log("eroor:" + error.message);
        return res.json({ message: "Invalid email or password." });
      }
      return res.json({ message: "Email not found. Please register." });
    }
    const { data: profileData, error: profileError } = await supabase
      .from("profiles")
      .select("full_name")
      .eq("id", data.user.id)
      .single();
    if (profileError) {
      console.error("Error fetching profile data: ", profileError.message);
      return res.json({ message: "failed to fetch user profile." });
    }
    console.log("name of the testing supabase is : " + profileData.full_name);
    const name = profileData.full_name;
    const token = jwt.sign(
      { id: data.user.id, name: profileData.full_name, email: data.user.email },
      "jwt-secret-key",
      { expiresIn: "1d" }
    );
    // For development (set secure to false) and production (set secure to true)
    res.cookie("token", token, {
      httpOnly: true, // Ensures the cookie is not accessible via JavaScript
      secure: false,
      maxAge: 24 * 60 * 60 * 1000 
    });
    // Successful Login: Return User Info
    return res.json({
      message: "Login successful!",
      user: {
        email: data.user.email,
        full_name: profileData.full_name,
      },
      success: true,
    });
  } catch (error) {
    return res.json({ message: "Something went wrong!", error: error.message });
  }
});

module.exports = router;
